{"version":3,"sources":["components/chart/index.js","components/stock_list/components/table/index.js","services/services.js","store/actions/fetchCurrentStock.js","store/actions/fetchStock.js","store/actions/fetchTopStocks.js","components/stock_list/index.js","components/main/index.js","store/actions/fetchStocksList.js","containers/App/index.js","serviceWorker.js","store/reducers/currentStock.js","store/reducers/stock.js","store/reducers/topStocks.js","store/reducers/stocksList.js","store/reducers/index.js","store/index.js","index.js"],"names":["Charts","props","state","options","chart","zoomType","title","text","xAxis","type","labels","formatter","Highcharts","dateFormat","this","value","tickPixelInterval","yAxis","legend","enabled","plotOptions","area","fillColor","linearGradient","x1","y1","x2","y2","stops","getOptions","colors","color","setOpacity","get","marker","radius","lineWidth","states","hover","threshold","series","name","data","stock","stock_name","values_with_time","map","val","d","Date","time","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","price","setState","Fragment","highcharts","React","Component","connect","StockReducer","top_stocks","TopStocksReducer","error","CurrentStockReducer","stock_id","TableComponent","length","slice","strip_color","strip_colors","head_color","className","style","background","head","row","i","onClick","e","changeStock","ltp","per_chng","volume","SERVICES","BASE_URL","window","location","origin","apis","current_stock","url","stocks_list","stock_data","setCurrentStock","payload","fetchStock","dispatch","fetch","then","res","json","catch","err","fetchTopStocksSuccess","fetchTopStocksError","fetchTopStocks","n","StockListing","current_tab","bind","_tab","gainers","losers","aria-hidden","changeTab","class","renderGainLossTable","renderMostActiveTable","Main","fetchDataOnRegularInterval","width","height","viewBox","fill","xmlns","margin","fontWeight","getIcon","open","high","low","border","marginTop","marginBottom","fetchCurrentStock","console","log","fetchStocksList","customHistory","createBrowserHistory","App","history","path","component","Boolean","hostname","match","initialState","pending","actions","StocksListReducer","combineReducers","consoleMessages","store","next","action","applyMiddleware","thunk","createStore","appReducer","storeFactory","localStorage","JSON","parse","subscribe","stringify","getState","navigator","serviceWorker","ready","registration","unregister","message","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cbfe1d2f.chunk.js","sourcesContent":["import React from 'react';\nimport Highcharts from 'highcharts';\nimport HighchartsReact from 'highcharts-react-official';\nimport { connect } from \"react-redux\";\n\nclass Charts extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      options: {\n        chart: {\n          zoomType: 'x'\n        },\n        title: {\n          text: ''\n        },\n        xAxis: {\n          type: 'datetime',\n          labels: {\n            //You can format the label according to your need\n            // format: '{value:%H:%m}'\n            formatter: function() {\n              return Highcharts.dateFormat('%H:%M', this.value);\n            }\n          },\n          tickPixelInterval: 150,\n        },\n        yAxis: {\n          title: {\n            text: 'Stock prices'\n          }\n        },\n        legend: {\n          enabled: false\n        },\n        plotOptions: {\n          area: {\n            fillColor: {\n              linearGradient: {\n                x1: 0,\n                y1: 0,\n                x2: 0,\n                y2: 1\n              },\n              stops: [\n                [0, Highcharts.getOptions().colors[0]],\n                [1, Highcharts.color(Highcharts.getOptions().colors[0]).setOpacity(0).get('rgba')]\n              ]\n            },\n            marker: {\n              radius: 2\n            },\n            lineWidth: 1,\n            states: {\n              hover: {\n                lineWidth: 1\n              }\n            },\n            threshold: null\n          }\n        },\n        series: [{\n          type: 'area',\n          name: 'Stock prices',\n          data: [],\n          // pointInterval: 5*60 * 1000\n        }]\n      }\n    }\n  }\n\n  componentDidUpdate() {\n    const options = { ...this.state.options };\n    if (options.title.text !== this.props.stock?.stock_name) {\n      options.title.text = this.props.stock?.stock_name;\n      options.series[0].data = this.props.stock?.values_with_time.map(val => {\n        let d = new Date(val.time);\n        return [Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes()), val.price ]\n      });\n      this.setState({ options });\n    }\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <HighchartsReact\n          highcharts={Highcharts}\n          options={this.state.options}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state =>\n  ({\n    stock: state.StockReducer.stock,\n    top_stocks: state.TopStocksReducer.top_stocks,\n    error: state.CurrentStockReducer.error,\n    stock_id: state.CurrentStockReducer.stock_id\n  })\n\nexport default connect(mapStateToProps, null)(Charts);\n","import React from 'react';\nimport './style.scss';\n\nconst TableComponent = (props) => {\n  const table_heads = ['SYMBOL','LTP','%CHNG','VOLUME'];\n\n  let { data } = props;\n  if(data.length > 4) {\n    data = data.slice(0,4)\n  }\n\n  const strip_color = props.strip_colors || '#f4fdf0';\n  const head_color = props.head_color || '#009900';\n\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr style={{background: head_color}}>\n          {table_heads.map(head => <th className=\"table-th1\">{ head }</th>)}\n        </tr>\n      </thead>\n      <tbody>\n        {\n          data.map((row,i) => \n          <tr className=\"crsr-ptr\" style={(i%2 !== 0) ? {background: strip_color} : {}} onClick={(e) => props.changeStock(row.stock_id)}>\n            <td className=\"text-over\">{ row.stock_name }</td>\n            <td>{ row.ltp }</td>\n            <td style={{color: head_color}}>{ row.per_chng }</td>\n            <td>{ row.volume }</td>\n          </tr>)\n        }\n      </tbody>\n    </table>\n  );\n}\n\nexport default TableComponent;","export const SERVICES = {\n  // BASE_URL: 'http://localhost:3005/api/v1',\n  BASE_URL: `${window.location.origin}/api/v1`,\n  apis: {\n    current_stock: {\n      url: 'stocks/current'\n    },\n    top_stocks: {\n      url: 'stocks/top'\n    },\n    stocks_list: {\n      url: 'stocks/list'\n    },\n    stock_data: {\n      url: 'stocks/data'\n    }\n  }\n}","import { SERVICES } from '../../services/services';\n\nexport const FETCH_CURRENT_STOCK_PENDING = 'FETCH_CURRENT_STOCK_PENDING';\nexport const FETCH_CURRENT_STOCK_SUCCESS = 'FETCH_CURRENT_STOCK_SUCCESS';\nexport const FETCH_CURRENT_STOCK_ERROR = 'FETCH_CURRENT_STOCK_ERROR';\nexport const SET_CURRENT_STOCK = 'SET_CURRENT_STOCK';\n\nexport const fetchCurrentStockPending = () => {\n  return {\n    type: FETCH_CURRENT_STOCK_PENDING\n  };\n}\n\nexport const fetchCurrentStockSuccess = (data) => {\n  return {\n    type: FETCH_CURRENT_STOCK_SUCCESS,\n    payload: data\n  }\n}\n\nexport const fetchCurrentStockError = (error) => {\n  return {\n    type: FETCH_CURRENT_STOCK_ERROR,\n    payload: error\n  }\n}\n\nexport const setCurrentStock = (stock_id) => {\n  return {\n    type: SET_CURRENT_STOCK,\n    payload: stock_id\n  };\n}\n\nexport const fetchCurrentStock = (stock_id) => {\n\n  return dispatch => {\n    dispatch(fetchCurrentStockPending());\n\n    const url = `${SERVICES.BASE_URL}/${SERVICES.apis.current_stock.url}/${stock_id}`;\n  \n    fetch(url)\n    .then(res => res.json())\n    .then(res => {\n      console.log('=================',res);\n      return dispatch(fetchCurrentStockSuccess(res.data));\n    }).catch(err => dispatch(fetchCurrentStockError(err)));\n  }\n}","import { SERVICES } from '../../services/services';\n\nexport const FETCH_STOCK_PENDING = 'FETCH_STOCK_PENDING';\nexport const FETCH_STOCK_SUCCESS = 'FETCH_STOCK_SUCCESS';\nexport const FETCH_STOCK_ERROR = 'FETCH_STOCK_ERROR';\n\n\nexport const fetchStockPending = () => {\n  return {\n    type: FETCH_STOCK_PENDING\n  };\n}\n\nexport const fetchStockSuccess = (data) => {\n  return {\n    type: FETCH_STOCK_SUCCESS,\n    payload: data\n  }\n}\n\nexport const fetchStockError = (error) => {\n  return {\n    type: FETCH_STOCK_ERROR,\n    payload: error\n  }\n}\n\nexport const fetchStock = (stock_id) => {\n  return dispatch => {\n    dispatch(fetchStockPending());\n\n    const url = `${SERVICES.BASE_URL}/${SERVICES.apis.stock_data.url}/${stock_id}`;\n  \n    fetch(url)\n    .then(res => res.json())\n    .then(res => dispatch(fetchStockSuccess(res.data)))\n    .catch(err => dispatch(fetchStockError(err)));\n  }\n}","import { SERVICES } from '../../services/services';\n\nexport const FETCH_TOP_STOCKS_PENDING = 'FETCH_TOP_STOCKS_PENDING';\nexport const FETCH_TOP_STOCKS_SUCCESS = 'FETCH_TOP_STOCKS_SUCCESS';\nexport const FETCH_TOP_STOCKS_ERROR = 'FETCH_TOP_STOCKS_ERROR';\n\n\nexport const fetchTopStocksPending = () => {\n  return {\n    type: FETCH_TOP_STOCKS_PENDING\n  };\n}\n\nexport const fetchTopStocksSuccess = (data) => {\n  return {\n    type: FETCH_TOP_STOCKS_SUCCESS,\n    payload: data\n  }\n}\n\nexport const fetchTopStocksError = (error) => {\n  return {\n    type: FETCH_TOP_STOCKS_ERROR,\n    payload: error\n  }\n}\n\nexport const fetchTopStocks = (n = 10) => {\n  return dispatch => {\n    dispatch(fetchTopStocksPending());\n\n    const url = `${SERVICES.BASE_URL}/${SERVICES.apis.top_stocks.url}/${n}`;\n  \n    fetch(url)\n    .then(res => res.json())\n    .then(res => dispatch(fetchTopStocksSuccess(res.data)))\n    .catch(err => dispatch(fetchTopStocksError(err)));\n  }\n}","import React from 'react';\nimport TableComponent from './components/table';\nimport { connect } from \"react-redux\";\nimport { setCurrentStock } from '../../store/actions/fetchCurrentStock';\nimport { fetchStock } from '../../store/actions/fetchStock';\nimport { fetchTopStocks } from '../../store/actions/fetchTopStocks';\nimport './style.scss';\n\nclass StockListing extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      current_tab: 1\n    };\n\n    this.changeStock = this.changeStock.bind(this);\n  }\n\n  changeTab(_tab) {\n    this.setState({ current_tab: _tab });\n  }\n\n  changeStock(stock_id) {\n    this.props.setCurrentStock(stock_id);\n    this.props.fetchStock(stock_id);\n  }\n\n  renderGainLossTable() {\n    return (\n      <div className='table-responsive'>\n        <TableComponent\n          strip_colors={'#f4fdf0'}\n          head_color={'#009900'}\n          data={this.props.top_stocks?.gainers || []}\n          changeStock={this.changeStock}\n        />\n        <TableComponent\n          strip_colors={'#e3e3e3'}\n          head_color={'#cb0505'}\n          data={this.props.top_stocks?.losers || []}\n          changeStock={this.changeStock}\n        />\n\n        <div>\n          <span className=\"float-right crs-point d-none\">\n            <span className=\"mr-2\" style={{ color: '#e86d24' }}>View All</span>\n            <i className=\"fa fa-arrow-right\" aria-hidden=\"true\" style={{ color: \"#e86d24\" }}></i>\n          </span>\n        </div>\n      </div>\n    );\n  }\n\n  renderMostActiveTable() {\n    return(\n      <div className=\"d-flex align-items-center justify-content-center mt-5\">\n        NO DATA FOUND\n        {/* <TableComponent \n          strip_colors={'#e3e3e3'}\n          head_color={'#009900'}\n        /> */}\n      </div>\n    );\n  }\n\n  render() {\n    const { current_tab } = this.state;\n\n    return (\n      <React.Fragment>\n        <ul className=\"nav nav-pills d-flex justify-content-center\" style={{ background: '#efefef' }}>\n          <li className=\"crs-point nav-item\" onClick={(e) => this.changeTab(1)}>\n            <a className={`nav-link ${current_tab === 1 ? 'active_tab' : 'inactive_tab'}`}>GAINERS/LOSERS</a>\n          </li>\n          <li class=\"crs-point nav-item\" onClick={(e) => this.changeTab(2)}>\n            <a class={`nav-link ${current_tab === 2 ? 'active_tab' : 'inactive_tab'}`}>MOST ACTIVE</a>\n          </li>\n        </ul>\n\n        { current_tab === 1 ? this.renderGainLossTable() : this.renderMostActiveTable() }\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = state =>\n  ({\n    stock: state.StockReducer.stock,\n    top_stocks: state.TopStocksReducer.top_stocks,\n    error: state.CurrentStockReducer.error,\n    stock_id: state.CurrentStockReducer.stock_id\n  })\n\nconst mapDispatchToProps = dispatch =>\n  ({\n    fetchStock: (stock_id) => dispatch((fetchStock(stock_id))),\n    fetchTopStocks: (n = 10) => dispatch((fetchTopStocks(n))),\n    setCurrentStock: (stock_id) => dispatch((setCurrentStock(stock_id))) \n  })\n\nexport default connect(mapStateToProps,mapDispatchToProps)(StockListing);\n","import React from 'react';\nimport Chart from '../chart';\nimport StockListing from '../stock_list';\nimport { connect } from \"react-redux\";\nimport { fetchCurrentStock, setCurrentStock } from '../../store/actions/fetchCurrentStock';\nimport { fetchStock } from '../../store/actions/fetchStock';\nimport { fetchStocksList } from '../../store/actions/fetchStocksList';\nimport { fetchTopStocks } from '../../store/actions/fetchTopStocks';\nimport './style.scss';\n\nclass Main extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  fetchDataOnRegularInterval() {\n    this.props.fetchStock(this.props.stock_id);\n    this.props.fetchTopStocks();\n  }\n\n  componentDidMount() {\n    this.fetchDataOnRegularInterval();\n  }\n\n  getIcon() {\n    // const { per_chng } = this.props.stock;\n\n    if(this.props.stock?.per_chng < 0) {\n      return(\n        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-caret-down-fill\" fill=\"#e75324\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z\"/>\n        </svg>\n      );\n    } else {\n      return(\n        <svg width=\"1em\" height=\"1em\" viewBox=\"0 0 16 16\" class=\"bi bi-caret-up-fill\" fill=\"#e75324\" xmlns=\"http://www.w3.org/2000/svg\">\n          <path d=\"M7.247 4.86l-4.796 5.481c-.566.647-.106 1.659.753 1.659h9.592a1 1 0 0 0 .753-1.659l-4.796-5.48a1 1 0 0 0-1.506 0z\"/>\n        </svg>        \n      );\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <div class=\"jumbotron jumbotron-fluid\">\n          <div class=\"container\">\n            <h1 class=\"display-4\">Paxcom Stock Prices</h1>\n            <p class=\"lead\">This is leading platform for realtime stock prices.</p>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-lg-8 col-md-12 col-sm-12\">\n            <div className=\"d-flex justify-content-between align-items-center\" style={{ margin: '1em 2em' }}>\n              <div>\n                <div style={{ fontWeight: 'bold' }}>\n                  <span className=\"mr-1\">\n                    {this.props.stock?.price || 0}\n                  </span>\n                  {this.getIcon()}\n                </div>\n                <div className=\"sub-text\" style={{ color: (this.props.stock?.per_chng < 0) ? '#ce3e5e' : '#2b9c18' }}>{`(${this.props.stock?.per_chng || 0}%)`}</div>\n              </div>\n              <div>\n                <div className=\"sub-text\">Open</div>\n                <div style={{ fontWeight: 'bold' }}>{this.props.stock?.open || 0}</div>\n              </div>\n              <div>\n                <div className=\"sub-text\">High</div>\n                <div style={{ fontWeight: 'bold', color: '#2b9c18' }}>{this.props.stock?.high || 0}</div>\n              </div>\n              <div>\n                <div className=\"sub-text\">Low</div>\n                <div style={{ fontWeight: 'bold', color: '#cb0508' }}>{this.props.stock?.low || 0}</div>\n              </div>\n            </div>\n            <div style={{ border: '1px solid #e4e4e4', marginTop: '2em', marginBottom: '2em' }}>\n              <Chart />\n            </div>\n          </div>\n          <div className=\"col-lg-4 col-md-12 col-sm-12\">\n            <StockListing />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = state =>\n  ({\n    stock: state.StockReducer.stock,\n    top_stocks: state.TopStocksReducer.top_stocks,\n    error: state.CurrentStockReducer.error,\n    stock_id: state.CurrentStockReducer.stock_id\n  })\n\nconst mapDispatchToProps = dispatch =>\n  ({\n    fetchCurrentStock: (stock_id) => dispatch(fetchCurrentStock(stock_id)),\n    fetchStock: (stock_id) => dispatch((fetchStock(stock_id))),\n    fetchStocksList: () => dispatch((fetchStocksList())),\n    fetchTopStocks: (n = 10) => dispatch((fetchTopStocks(n))),\n    setCurrentStock: (stock_id) => dispatch((setCurrentStock(stock_id)))\n  })\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\n","import { SERVICES } from '../../services/services';\n\nexport const FETCH_STOCKS_LIST_PENDING = 'FETCH_STOCKS_LIST_PENDING';\nexport const FETCH_STOCKS_LIST_SUCCESS = 'FETCH_STOCKS_LIST_SUCCESS';\nexport const FETCH_STOCKS_LIST_ERROR = 'FETCH_STOCKS_LIST_ERROR';\n\n\nexport const fetchStocksListPending = () => {\n  return {\n    type: FETCH_STOCKS_LIST_PENDING\n  };\n}\n\nexport const fetchStocksListSuccess = (data) => {\n  return {\n    type: FETCH_STOCKS_LIST_SUCCESS,\n    payload: data\n  }\n}\n\nexport const fetchStocksListError = (error) => {\n  return {\n    type: FETCH_STOCKS_LIST_ERROR,\n    payload: error\n  }\n}\n\nexport const fetchStocksList = () => {\n  return dispatch => {\n    dispatch(fetchStocksListPending());\n\n    const url = `${SERVICES.BASE_URL}/${SERVICES.apis.stocks_list.url}`;\n  \n    fetch(url)\n    .then(res => res.json())\n    .then(res => dispatch(fetchStocksListSuccess(res.data)))\n    .catch(err => dispatch(fetchStocksListError(err)));\n  }\n}","import React from 'react';\nimport { Router, Route } from 'react-router';\nimport Main from '../../components/main';\nimport { createBrowserHistory } from \"history\";\n\nconst customHistory = createBrowserHistory();\n\nconst App = (props) => {\n  return (\n    <Router history={customHistory}>\n      <Route path=\"/\" component={Main} />\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \n  FETCH_CURRENT_STOCK_ERROR,\n  FETCH_CURRENT_STOCK_SUCCESS,\n  FETCH_CURRENT_STOCK_PENDING,\n  SET_CURRENT_STOCK\n} from '../actions/fetchCurrentStock';\n\nconst initialState = {\n  stock_id: 1,\n  current_stock: null,\n  pending: false,\n  error: null\n};\n\nconst CurrentStockReducer = (state = initialState, actions) => {\n  switch(actions.type) {\n    case FETCH_CURRENT_STOCK_PENDING:\n      return { ...state,pending: true };\n\n    case FETCH_CURRENT_STOCK_SUCCESS:\n      const data = { ...actions.payload };\n      return { ...state, pending: false, current_stock: data, stock_id: data.stock_id };\n    \n    case FETCH_CURRENT_STOCK_ERROR:\n      return { ...state, pending: false, error: actions.payload };\n\n    case SET_CURRENT_STOCK:\n      return { ...state, pending: false, stock_id: actions.payload};\n\n    default: \n      return state;\n  }\n}\n\nexport default CurrentStockReducer;\n","import { \n  FETCH_STOCK_ERROR,\n  FETCH_STOCK_SUCCESS,\n  FETCH_STOCK_PENDING\n} from '../actions/fetchStock';\n\n\nconst initialState = {\n  stock: null,\n  pending: false,\n  error: null\n};\n\nconst StockReducer = (state = initialState, actions) => {\n  switch(actions.type) {\n    case FETCH_STOCK_PENDING:\n      return { ...state,pending: true };\n\n    case FETCH_STOCK_SUCCESS:\n      return { ...state, pending: false, stock: actions.payload };\n    \n    case FETCH_STOCK_ERROR:\n      return { ...state, pending: false, error: actions.payload };\n\n    default: \n      return state;\n  }\n}\n\nexport default StockReducer;\n","import { \n  FETCH_TOP_STOCKS_PENDING,\n  FETCH_TOP_STOCKS_SUCCESS,\n  FETCH_TOP_STOCKS_ERROR\n} from '../actions/fetchTopStocks';\n\n\nconst initialState = {\n  top_stocks: null,\n  pending: false,\n  error: null\n};\n\nconst TopStocksReducer = (state = initialState, actions) => {\n  switch(actions.type) {\n    case FETCH_TOP_STOCKS_PENDING:\n      return { ...state,pending: true };\n\n    case FETCH_TOP_STOCKS_SUCCESS:\n      return { ...state, pending: false, top_stocks: actions.payload };\n    \n    case FETCH_TOP_STOCKS_ERROR:\n      return { ...state, pending: false, error: actions.payload };\n\n    default: \n      return state;\n  }\n}\n\nexport default TopStocksReducer;\n","import { \n  FETCH_STOCKS_LIST_PENDING,\n  FETCH_STOCKS_LIST_SUCCESS,\n  FETCH_STOCKS_LIST_ERROR\n} from '../actions/fetchStocksList';\n\n\nconst initialState = {\n  stocks_list: null,\n  pending: false,\n  error: null\n};\n\nconst StocksListReducer = (state = initialState, actions) => {\n  switch(actions.type) {\n    case FETCH_STOCKS_LIST_PENDING:\n      return { ...state,pending: true };\n\n    case FETCH_STOCKS_LIST_SUCCESS:\n      return { ...state, pending: false, stocks_list: actions.payload };\n    \n    case FETCH_STOCKS_LIST_ERROR:\n      return { ...state, pending: false, error: actions.payload };\n\n    default: \n      return state;\n  }\n}\n\nexport default StocksListReducer;\n","import { combineReducers } from 'redux';\nimport CurrentStockReducer from './currentStock';\nimport StockReducer from './stock';\nimport TopStocksReducer from './topStocks';\nimport StocksListReducer from './stocksList';\n\nexport default combineReducers({\n  CurrentStockReducer,\n  StockReducer,\n  TopStocksReducer,\n  StocksListReducer\n});\n","import appReducer from './reducers';\nimport thunk from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\n\nconst consoleMessages = store => next => action => {\n\n\tlet result\n\n\t// // console.groupCollapsed(`dispatching action => ${action.type}`)\n\t// // console.log('acions payload', action.payload)\n\tresult = next(action)\n\n\t// let { current_stock } = store.getState();\n\n\t// console.log(`\n\n\t// \tcurrent_stock: ${current_stock}\n\n\t// `)\n\n\t// console.groupEnd()\n\n\treturn result\n\n}\n\nexport default (initialState={}) => {\n\treturn applyMiddleware(thunk,consoleMessages)(createStore)(appReducer, initialState)\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './containers/App/';\nimport * as serviceWorker from './serviceWorker';\nimport storeFactory from './store';\n\nconst initialState = (localStorage[\"redux-store\"]) ?\n    JSON.parse(localStorage[\"redux-store\"]) :\n    {}\n\nconst saveState = () => {\n  localStorage[\"redux-store\"] = JSON.stringify(store.getState());\n}\n\nconst store = storeFactory(initialState);\nstore.subscribe(saveState);\n\nserviceWorker.unregister();\n\nwindow.React = React\nwindow.store = store\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);"],"sourceRoot":""}